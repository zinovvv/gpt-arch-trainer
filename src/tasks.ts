export type Task = {
  id: string;
  title: string;
  description: string;
  stages: string[]; 
};

export const tasks: Task[] = [
  {
  id: 'blank',
  title: 'Пустой проект',
  description: 'Начните проектирование с чистого листа, без готового сценария.',
  stages: [
    '1. Выяснение требований: Начни с ключевого вопроса - "Какую систему или приложение вы хотите спроектировать?". Помоги пользователю сформулировать основные цели и функции.',
    '2. Предложение архитектурных паттернов: Как только общая идея станет ясна, предложи пользователю на выбор базовые архитектурные паттерны (например, Монолит, Микросервисы, Serverless) и обсуди, какой из них лучше подходит для его задачи.',
    '3. Формирование базовой архитектуры: Помоги определить и добавить на схему основные компоненты, исходя из ответов пользователя.',
    '4. Уточнение масштабируемости: Задай вопросы о предполагаемой нагрузке, количестве данных и требованиях к доступности, чтобы выбрать подходящие технологии и подходы к масштабированию.',
    '5. Финальная рецензия: Когда пользователь напишет "завершить проектирование", дай краткий обзор получившейся архитектуры, оцени принятые решения и предложи возможные улучшения.'
  ],
},
  {
    id: 'crm',
    title: 'Простая CRM',
    description: 'Система для учета клиентов и сделок для малого бизнеса.',
    stages: [
      '1. Выяснение требований: Начни с выяснения основных сущностей (Клиенты, Сделки, Пользователи) и ключевых бизнес-процессов (создание клиента, ведение сделки по воронке).',
      '2. Предложение архитектурных паттернов: Исходя из требований, предложи пользователю на выбор два основных подхода: Монолитная архитектура для быстрого старта и простоты, или Микросервисная для гибкости и масштабируемости в будущем. Обсуди плюсы и минусы каждого в контексте CRM.',
      '3. Формирование базовой архитектуры: Помоги пользователю определить и добавить на схему основные компоненты (например, Frontend, Backend/API, База данных).',
      '4. Уточнение масштабируемости: Задай вопросы о предполагаемом количестве клиентов и одновременных пользователей, чтобы оценить нагрузку и выбрать подходящий тип базы данных (например, PostgreSQL).',
      '5. Финальная рецензия: Когда пользователь напишет "завершить проектирование", дай краткий обзор архитектуры, оцени выбранные решения и предложи возможные улучшения (например, добавление сервиса отчетов или аналитики).',
    ],
  },
  {
    id: 'courses',
    title: 'Платформа для курсов',
    description: 'Онлайн-платформа с видео, заданиями и отслеживанием прогресса.',
    stages: [
      '1. Выяснение требований: Уточни у пользователя роли (Студент, Преподаватель, Администратор) и их основные функции (просмотр/загрузка видео, создание/прохождение тестов).',
      '2. Формирование базовой архитектуры: Помоги определить и добавить на схему ключевые компоненты (например, Student App, Teacher Panel, API Gateway, Database).',
      '3. Уточнение масштабируемости (Видео): Сконцентрируйся на проблеме хранения и доставки видео. Обсуди необходимость использования Объектного хранилища (S3) и CDN для быстрой доставки контента по всему миру.',
      '4. Предложение архитектурных паттернов (Асинхронность): Предложи использовать паттерн "Очередь сообщений" (Message Queue) и "Воркер" для решения длительных задач, таких как обработка (транскодирование) загруженного видео, чтобы не блокировать основной API.',
      '5. Финальная рецензия: Когда пользователь напишет "завершить проектирование", дай краткий обзор получившейся архитектуры, обратив особое внимание на решения по масштабируемости видео и асинхронной обработке.',
    ],
  },
  {
    id: 'tracker',
    title: 'Трекер задач (Trello-like)',
    description: 'Система с API и UI для управления задачами на досках.',
    stages: [
      '1. Выяснение требований: Определи с пользователем основные сущности: Доска, Колонка, Карточка. Спроси о необходимости поддержки вложений и комментариев.',
      '2. Проектирование API (Паттерн REST): Помоги спроектировать основные эндпоинты RESTful API для CRUD-операций с досками, колонками и карточками (например, GET /boards/{id}/lists, POST /lists/{id}/cards).',
      '3. Проектирование UI компонентов: Обсуди, какие основные React-компоненты понадобятся для фронтенда и как они будут взаимодействовать (Board, Column, Card, CardDetailsModal).',
      '4. Уточнение масштабируемости (Real-time): Задай вопрос, должны ли изменения на доске (перетаскивание карточки) мгновенно отображаться у других пользователей. Если да, предложи использовать WebSocket для обновлений в реальном времени.',
      '5. Финальная рецензия: Когда пользователь напишет "завершить проектирование", дай краткий обзор архитектуры, оценив дизайн API и предложив улучшения, например, введение роли "Владелец доски" для управления доступом.',
    ],
  },
];