export type Task = {
  id: string;
  title: string;
  description: string;
  stages: string[]; 
};

export const tasks: Task[] = [
  {
    id: 'blank',
    title: 'Пустой проект',
    description: 'Начните проектирование с чистого листа, без готового сценария.',
    stages: [
      'Этап 1: Выяснение требований. Ключевой вопрос: "Какую систему вы хотите спроектировать?". Помоги пользователю сформулировать цели и функции.',
      'Этап 2: Предложение архитектурных паттернов. Ключевой вопрос: "Какой базовый архитектурный паттерн выберем: Монолит или Микросервисы?". Обсуди плюсы и минусы для задачи пользователя.',
      'Этап 3: Формирование диаграммы. Помоги определить и добавить на схему основные компоненты и связи между ними.',
      'Этап 4: Уточнение масштабируемости. Ключевой вопрос: "Какая ожидается нагрузка на систему?". Обсуди нефункциональные требования (нагрузка, безопасность, отказоустойчивость).',
      'Этап 5: Финальная рецензия. Кодовая фраза: "завершить проектирование". Дай краткий обзор, оцени решения и предложи улучшения.'
    ],
  },
  {
    id: 'crm',
    title: 'Простая CRM',
    description: 'Система для учета клиентов и сделок для малого бизнеса.',
    stages: [
      'Этап 1: Выяснение требований. Ключевые сущности: Клиенты, Сделки, Пользователи. Обсуди основные бизнес-процессы.',
      'Этап 2: Предложение архитектурных паттернов. Предложи выбрать между Монолитом и Микросервисами для этой CRM. Обрати внимание на простоту поддержки монолита для малого бизнеса.',
      'Этап 3: Формирование диаграммы. Добавь на схему Frontend, Backend API и Базу данных. Уточни технологии (React, Node.js, PostgreSQL).',
      'Этап 4: Уточнение масштабируемости. Обсуди объем данных. Предупреди об антипаттерне "Все в одной таблице", предложи нормализацию данных в реляционной БД.',
      'Этап 5: Финальная рецензия. Кодовая фраза: "завершить проектирование". Оцени архитектуру и предложи, как в будущем можно добавить модуль аналитики.'
    ],
  },
  {
    id: 'courses',
    title: 'Платформа для курсов',
    description: 'Онлайн-платформа с видео, заданиями и отслеживанием прогресса.',
    stages: [
      'Этап 1: Выяснение требований. Ключевые роли: Студент, Преподаватель. Функции: просмотр/загрузка видео, создание/прохождение тестов.',
      'Этап 2: Формирование диаграммы. Добавь на схему Student App, Teacher Panel, API Gateway, Database. Сразу предложи S3-хранилище для видео.',
      'Этап 3: Предложение архитектурных паттернов (Асинхронность). Ключевой вопрос: "Как обрабатывать загрузку видео, не заставляя пользователя ждать?". Предложи паттерн "Очередь сообщений" (RabbitMQ) и "Воркер".',
      'Этап 4: Уточнение масштабируемости (Доставка контента). Обсуди проблему быстрой доставки видео. Предложи использовать CDN.',
      'Этап 5: Финальная рецензия. Кодовая фраза: "завершить проектирование". Оцени решение с асинхронной обработкой и CDN.'
    ],
  },
  {
    id: 'tracker',
    title: 'Трекер задач (Trello-like)',
    description: 'Система с API и UI для управления задачами на досках.',
    stages: [
      'Этап 1: Выяснение требований. Сущности: Доска, Колонка, Карточка. Функции: перетаскивание, комментарии.',
      'Этап 2: Предложение архитектурных паттернов (API). Предложи спроектировать API в стиле REST. Обсуди основные эндпоинты.',
      'Этап 3: Уточнение масштабируемости (Real-time). Ключевой вопрос: "Как сделать так, чтобы изменения на доске мгновенно видели все участники?". Предложи использовать WebSocket.',
      'Этап 4: Формирование диаграммы. Добавь на схему Frontend, Backend, Database и WebSocket-соединение.',
      'Этап 5: Финальная рецензия. Кодовая фраза: "завершить проектирование". Оцени дизайн API и предложи, как можно было бы реализовать аутентификацию (например, через отдельный Auth Service).'
    ],
  },
];